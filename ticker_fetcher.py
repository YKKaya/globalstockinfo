{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2cc302da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'AA', 'AAC', 'AACT', 'AAIC']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from enum import Enum\n",
    "import io\n",
    "import requests\n",
    "\n",
    "_EXCHANGE_LIST = ['nyse', 'nasdaq', 'amex']\n",
    "\n",
    "_SECTORS_LIST = set(['Consumer Non-Durables', 'Capital Goods', 'Health Care',\n",
    "       'Energy', 'Technology', 'Basic Industries', 'Finance',\n",
    "       'Consumer Services', 'Public Utilities', 'Miscellaneous',\n",
    "       'Consumer Durables', 'Transportation'])\n",
    "\n",
    "\n",
    "# headers and params used to bypass NASDAQ's anti-scraping mechanism in function __exchange2df\n",
    "headers = {\n",
    "    'authority': 'api.nasdaq.com',\n",
    "    'accept': 'application/json, text/plain, */*',\n",
    "    'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',\n",
    "    'origin': 'https://www.nasdaq.com',\n",
    "    'sec-fetch-site': 'same-site',\n",
    "    'sec-fetch-mode': 'cors',\n",
    "    'sec-fetch-dest': 'empty',\n",
    "    'referer': 'https://www.nasdaq.com/',\n",
    "    'accept-language': 'en-US,en;q=0.9',\n",
    "}\n",
    "\n",
    "def params(exchange):\n",
    "    return (\n",
    "        ('letter', '0'),\n",
    "        ('exchange', exchange),\n",
    "        ('download', 'true'),\n",
    "    )\n",
    "\n",
    "def params_region(region):\n",
    "    return (\n",
    "        ('letter', '0'),\n",
    "        ('region', region),\n",
    "        ('download', 'true'),\n",
    "    )\n",
    "\n",
    "# I know it's weird to have Sectors as constants, yet the Regions as enums, but\n",
    "# it makes the most sense to me\n",
    "class Region(Enum):\n",
    "    AFRICA = 'AFRICA'\n",
    "    EUROPE = 'EUROPE'\n",
    "    ASIA = 'ASIA'\n",
    "    AUSTRALIA_SOUTH_PACIFIC = 'AUSTRALIA+AND+SOUTH+PACIFIC'\n",
    "    CARIBBEAN = 'CARIBBEAN'\n",
    "    SOUTH_AMERICA = 'SOUTH+AMERICA'\n",
    "    MIDDLE_EAST = 'MIDDLE+EAST'\n",
    "    NORTH_AMERICA = 'NORTH+AMERICA'\n",
    "\n",
    "class SectorConstants:\n",
    "    NON_DURABLE_GOODS = 'Consumer Non-Durables'\n",
    "    CAPITAL_GOODS = 'Capital Goods'\n",
    "    HEALTH_CARE = 'Health Care'\n",
    "    ENERGY = 'Energy'\n",
    "    TECH = 'Technology'\n",
    "    BASICS = 'Basic Industries'\n",
    "    FINANCE = 'Finance'\n",
    "    SERVICES = 'Consumer Services'\n",
    "    UTILITIES = 'Public Utilities'\n",
    "    DURABLE_GOODS = 'Consumer Durables'\n",
    "    TRANSPORT = 'Transportation'\n",
    "\n",
    "\n",
    "# get tickers from chosen exchanges (default all) as a list\n",
    "def get_tickers(NYSE=True, NASDAQ=True, AMEX=True):\n",
    "    tickers_list = []\n",
    "    if NYSE:\n",
    "        tickers_list.extend(__exchange2list('nyse'))\n",
    "    if NASDAQ:\n",
    "        tickers_list.extend(__exchange2list('nasdaq'))\n",
    "    if AMEX:\n",
    "        tickers_list.extend(__exchange2list('amex'))\n",
    "    return tickers_list\n",
    "\n",
    "\n",
    "def get_tickers_filtered(mktcap_min=None, mktcap_max=None, sectors=None):\n",
    "    tickers_list = []\n",
    "    for exchange in _EXCHANGE_LIST:\n",
    "        tickers_list.extend(__exchange2list_filtered(exchange, mktcap_min=mktcap_min, mktcap_max=mktcap_max, sectors=sectors))\n",
    "    return tickers_list\n",
    "\n",
    "\n",
    "def get_biggest_n_tickers(top_n, sectors=None):\n",
    "    df = pd.DataFrame()\n",
    "    for exchange in _EXCHANGE_LIST:\n",
    "        temp = __exchange2df(exchange)\n",
    "        df = pd.concat([df, temp])\n",
    "        \n",
    "    df = df.dropna(subset={'marketCap'})\n",
    "    df = df[~df['symbol'].str.contains(\"\\.|\\^\")]\n",
    "\n",
    "    if sectors is not None:\n",
    "        if isinstance(sectors, str):\n",
    "            sectors = [sectors]\n",
    "        if not _SECTORS_LIST.issuperset(set(sectors)):\n",
    "            raise ValueError('Some sectors included are invalid')\n",
    "        sector_filter = df['Sector'].apply(lambda x: x in sectors)\n",
    "        df = df[sector_filter]\n",
    "\n",
    "    def cust_filter(mkt_cap):\n",
    "        if 'M' in mkt_cap:\n",
    "            return float(mkt_cap[1:-1])\n",
    "        elif 'B' in mkt_cap:\n",
    "            return float(mkt_cap[1:-1]) * 1000\n",
    "        else:\n",
    "            return float(mkt_cap[1:]) / 1e6\n",
    "    df['marketCap'] = df['marketCap'].apply(cust_filter)\n",
    "\n",
    "    df = df.sort_values('marketCap', ascending=False)\n",
    "    if top_n > len(df):\n",
    "        raise ValueError('Not enough companies, please specify a smaller top_n')\n",
    "\n",
    "    return df.iloc[:top_n]['symbol'].tolist()\n",
    "\n",
    "\n",
    "def get_tickers_by_region(region):\n",
    "    if region in Region:\n",
    "        response = requests.get('https://old.nasdaq.com/screening/companies-by-name.aspx', headers=headers,\n",
    "                                params=params_region(region))\n",
    "        data = io.StringIO(response.text)\n",
    "        df = pd.read_csv(data, sep=\",\")\n",
    "        return __exchange2list(df)\n",
    "    else:\n",
    "        raise ValueError('Please enter a valid region (use a Region.REGION as the argument, e.g. Region.AFRICA)')\n",
    "\n",
    "def __exchange2df(exchange):\n",
    "    r = requests.get('https://api.nasdaq.com/api/screener/stocks', headers=headers, params=params(exchange))\n",
    "    data = r.json()['data']\n",
    "    df = pd.DataFrame(data['rows'], columns=data['headers'])\n",
    "    return df\n",
    "\n",
    "def __exchange2list(exchange):\n",
    "    df = __exchange2df(exchange)\n",
    "    # removes weird tickers\n",
    "    df_filtered = df[~df['symbol'].str.contains(\"\\.|\\^\")]\n",
    "    return df_filtered['symbol'].tolist()\n",
    "\n",
    "# market caps are in millions\n",
    "def __exchange2list_filtered(exchange, mktcap_min=None, mktcap_max=None, sectors=None):\n",
    "    df = __exchange2df(exchange)\n",
    "    df = df.dropna(subset={'marketCap'})\n",
    "    df = df[~df['symbol'].str.contains(\"\\.|\\^\")]\n",
    "\n",
    "    if sectors is not None:\n",
    "        if isinstance(sectors, str):\n",
    "            sectors = [sectors]\n",
    "        if not _SECTORS_LIST.issuperset(set(sectors)):\n",
    "            raise ValueError('Some sectors included are invalid')\n",
    "        sector_filter = df['sector'].apply(lambda x: x in sectors)\n",
    "        df = df[sector_filter]\n",
    "\n",
    "    def cust_filter(mkt_cap):\n",
    "        if 'M' in mkt_cap:\n",
    "            return float(mkt_cap[1:-1])\n",
    "        elif 'B' in mkt_cap:\n",
    "            return float(mkt_cap[1:-1]) * 1000\n",
    "        elif mkt_cap == '':\n",
    "            return 0.0\n",
    "        else:\n",
    "            return float(mkt_cap[1:]) / 1e6\n",
    "    df['marketCap'] = df['marketCap'].apply(cust_filter)\n",
    "    if mktcap_min is not None:\n",
    "        df = df[df['marketCap'] > mktcap_min]\n",
    "    if mktcap_max is not None:\n",
    "        df = df[df['marketCap'] < mktcap_max]\n",
    "    return df['symbol'].tolist()\n",
    "\n",
    "\n",
    "# save the tickers to a CSV\n",
    "def save_tickers(NYSE=True, NASDAQ=True, AMEX=True, filename='tickers.csv'):\n",
    "    tickers2save = get_tickers(NYSE, NASDAQ, AMEX)\n",
    "    df = pd.DataFrame(tickers2save)\n",
    "    df.to_csv(filename, header=False, index=False)\n",
    "\n",
    "def save_tickers_by_region(region, filename='tickers_by_region.csv'):\n",
    "    tickers2save = get_tickers_by_region(region)\n",
    "    df = pd.DataFrame(tickers2save)\n",
    "    df.to_csv(filename, header=False, index=False)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    # tickers of all exchanges\n",
    "    tickers = get_tickers()\n",
    "    print(tickers[:5])\n",
    "\n",
    "    # tickers from NYSE and NASDAQ only\n",
    "    tickers = get_tickers(AMEX=False)\n",
    "\n",
    "    # default filename is tickers.csv, to specify, add argument filename='yourfilename.csv'\n",
    "    save_tickers()\n",
    "\n",
    "    # save tickers from NYSE and AMEX only\n",
    "    save_tickers(NASDAQ=False)\n",
    "\n",
    "    # get tickers from Asia\n",
    "    tickers_asia = get_tickers_by_region(Region.ASIA)\n",
    "    print(tickers_asia[:5])\n",
    "\n",
    "    # save tickers from Europe\n",
    "    save_tickers_by_region(Region.EUROPE, filename='EU_tickers.csv')\n",
    "\n",
    "    # get tickers filtered by market cap (in millions)\n",
    "    filtered_tickers = get_tickers_filtered(mktcap_min=500, mktcap_max=2000)\n",
    "    print(filtered_tickers[:5])\n",
    "\n",
    "    # not setting max will get stocks with $2000 million market cap and up.\n",
    "    filtered_tickers = get_tickers_filtered(mktcap_min=2000)\n",
    "    print(filtered_tickers[:5])\n",
    "\n",
    "    # get tickers filtered by sector\n",
    "    filtered_by_sector = get_tickers_filtered(mktcap_min=200e3, sectors=SectorConstants.FINANCE)\n",
    "    print(filtered_by_sector[:5])\n",
    "\n",
    "    # get tickers of 5 largest companies by market cap (specify sectors=SECTOR)\n",
    "    top_5 = get_biggest_n_tickers(5)\n",
    "    print(top_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07165420",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
